<?php

namespace SoliDryTest\Unit\Extensions;


use Faker\Factory;
use Illuminate\Routing\Route;
use Modules\V2\Entities\Article;
use Modules\V2\Http\Controllers\ArticleController;
use SoliDry\Exceptions\AttributesException;
use SoliDry\Extension\BaseController;
use SoliDry\Extension\JSONApiInterface;
use SoliDryTest\_data\ArticleFixture;
use SoliDryTest\Unit\TestCase;

/**
 * Class BaseControllerTest
 * @package rjapitest\Unit\Extensions
 *
 * @property BaseController baseController
 */
class BaseControllerTest extends TestCase
{
    private $baseController;

    public function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $_SERVER['HTTP_HOST'] = 'localhost';

        $router               = new Route(['POST', 'GET'], '', function () {
        });
        $this->baseController = new ArticleController($router);
    }

    /**
     * Fake generated provider for articles
     * @throws \Exception
     */
    public function articleBulkProvider()
    {
        $faker = Factory::create();

        return ['data' => [
            [
                'id'           => uniqid(),
                'title'        => $faker->title,
                'fake_attr'    => 'attr',
                'description'  => $faker->name,
                'url'          => $faker->url . uniqid('', true),
                'topic_id'     => 1,
                'rate'         => random_int(1, 10),
                'status'       => 'draft',
                'show_in_top'  => random_int(0, 1),
                'date_posted'  => date('Y-m-d'),
                'time_to_live' => $faker->time(),
            ],
            [
                'id'           => uniqid(),
                'title'        => $faker->title,
                'fake_attr'    => 'attr',
                'description'  => $faker->name,
                'url'          => $faker->url . uniqid('', true),
                'topic_id'     => 1,
                'rate'         => random_int(1, 10),
                'status'       => 'draft',
                'show_in_top'  => random_int(0, 1),
                'date_posted'  => date('Y-m-d'),
                'time_to_live' => $faker->time(),
            ],
        ],
        ];
    }

    /**
     * @test
     * @throws \Exception
     */
    public function it_creates_bulk()
    {
        $data = $this->articleBulkProvider();
        $resp = $this->baseController->createBulk($this->request($data));

        $respJson = json_decode($resp->getContent(), true)['data'];
        foreach ($data['data'] as $k => $v) {
            $this->assertEquals($v['id'], $respJson[$k]['id']);
        }
    }

    /**
     * @test
     * @throws AttributesException
     */
    public function it_updates_bulk()
    {
        /** @var Article $firstItem */
        $firstItem  = ArticleFixture::createAndGet();
        $secondItem = ArticleFixture::createAndGet();

        // change values
        $faker = Factory::create();

        $data = [
            'data' => [
                [
                    'type'         => 'article',
                    'id'           => $firstItem->id,
                    'title'        => $faker->title,
                    'description'  => $faker->name,
                    'fake_attr'    => 'attr',
                    'url'          => $firstItem->url,
                    'show_in_top'  => $firstItem->show_in_top,
                    'topic_id'     => $firstItem->topic_id,
                    'rate'         => $firstItem->rate,
                    'date_posted'  => $firstItem->date_posted,
                    'time_to_live' => $firstItem->time_to_live,
                ],
                [
                    'type'         => 'article',
                    'id'           => $secondItem->id,
                    'title'        => $faker->title,
                    'description'  => $faker->name,
                    'fake_attr'    => 'attr',
                    'url'          => $secondItem->url,
                    'show_in_top'  => $secondItem->show_in_top,
                    'topic_id'     => $secondItem->topic_id,
                    'rate'         => $secondItem->rate,
                    'date_posted'  => $secondItem->date_posted,
                    'time_to_live' => $secondItem->time_to_live,
                ],
            ],
        ];

        $resp = $this->baseController->updateBulk($this->request($data));

        $respJson = json_decode($resp->getContent(), true)['data'];
        foreach ($data['data'] as $k => $v) {
            $this->assertEquals($v['title'], $respJson[$k]['attributes']['title']);
        }
    }

    /**
     * @test
     */
    public function it_deletes_bulk()
    {
        $router               = new Route(['DELETE'], '', function () {
        });
        $this->baseController = new ArticleController($router);

        $firstItem  = ArticleFixture::createAndGet();
        $secondItem = ArticleFixture::createAndGet();

        $data = [
            'data' => [
                [
                    'type' => 'article',
                    'id'   => $firstItem->id,
                ],
                [
                    'type' => 'article',
                    'id'   => $secondItem->id,
                ],
            ],
        ];

        $resp = $this->baseController->deleteBulk($this->request($data));
        $this->assertEquals($resp->getStatusCode(), JSONApiInterface::HTTP_RESPONSE_CODE_NO_CONTENT);
    }
}